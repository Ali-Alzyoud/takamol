openapi: 3.0.3
info:
  title: Takamol API
  version: 1.0.0
  description: Your project description
paths:
  /api/community/:
    get:
      operationId: community_list
      tags:
      - community
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Topic"
          description: ""
    post:
      operationId: community_create
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TopicRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TopicRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: ""
  /api/community/{id}/:
    get:
      operationId: community_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - community
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: ""
    put:
      operationId: community_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TopicRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TopicRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: ""
    patch:
      operationId: community_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedTopicRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedTopicRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedTopicRequest"
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
          description: ""
    delete:
      operationId: community_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - community
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "204":
          description: No response body
  /api/community/comments/:
    get:
      operationId: community_comments_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - community
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedCommentList"
          description: ""
    post:
      operationId: community_comments_create
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CommentRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CommentRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
  /api/community/comments/reply/:
    post:
      operationId: community_comments_reply_create
      description: Create a reply to an existing comment.
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CommentRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CommentRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
          description: ""
  /api/community/vote/:
    post:
      operationId: community_vote_create
      description: Allows a user to cast or update a vote (+1 or -1) on a topic.
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/VoteRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/VoteRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vote"
          description: ""
  /api/polls/:
    get:
      operationId: polls_list
      tags:
      - polls
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Poll"
          description: ""
    post:
      operationId: polls_create
      tags:
      - polls
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PollRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PollRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PollRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
          description: ""
  /api/polls/{id}/:
    get:
      operationId: polls_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - polls
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
          description: ""
    put:
      operationId: polls_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - polls
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PollRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PollRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PollRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
          description: ""
    patch:
      operationId: polls_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - polls
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedPollRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedPollRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedPollRequest"
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Poll"
          description: ""
    delete:
      operationId: polls_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - polls
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "204":
          description: No response body
  /api/polls/responses/:
    post:
      operationId: polls_responses_create
      tags:
      - polls
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateResponseRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreateResponseRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateResponseRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateResponse"
          description: ""
  /api/polls/responses/me/:
    get:
      operationId: polls_responses_me_list
      description: List all responses for the current authenticated user
      tags:
      - polls
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response"
          description: ""
  /api/users/:
    get:
      operationId: users_list
      description: |-
        Admin-only endpoint to list all users or create a user normally.
        (Not recommended for regular user creation if all users must come from invites.)
      tags:
      - users
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
          description: ""
    post:
      operationId: users_create
      description: |-
        Admin-only endpoint to list all users or create a user normally.
        (Not recommended for regular user creation if all users must come from invites.)
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
  /api/users/invitations/:
    get:
      operationId: users_invitations_list
      description: |-
        Endpoint for listing or creating invitations.
        (Creation is restricted to authorized users, e.g. staff.)
      tags:
      - users
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
          description: ""
    post:
      operationId: users_invitations_create
      description: |-
        Endpoint for listing or creating invitations.
        (Creation is restricted to authorized users, e.g. staff.)
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvitationRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/InvitationRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/InvitationRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invitation"
          description: ""
  /api/users/login/:
    post:
      operationId: users_login_create
      description: Log in with username and password to obtain an authentication token
      tags:
      - authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AuthTokenRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/AuthTokenRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/AuthTokenRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      responses:
        "200":
          description: Authentication successful, token returned
        "400":
          description: Invalid credentials
  /api/users/register/:
    post:
      operationId: users_register_create
      description: Public endpoint to register using an invite code and invite password.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterWithInviteRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RegisterWithInviteRequest"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RegisterWithInviteRequest"
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - Token: []
      - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterWithInvite"
          description: ""
components:
  schemas:
    AuthTokenRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    Choice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          maxLength: 255
      required:
      - id
      - text
    ChoiceRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 255
      required:
      - text
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        topic:
          type: integer
        content:
          type: string
        parent:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        replies:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - content
      - created_at
      - id
      - replies
      - topic
    CommentRequest:
      type: object
      properties:
        topic:
          type: integer
        content:
          type: string
          minLength: 1
        parent:
          type: integer
          nullable: true
      required:
      - content
      - topic
    CreateResponse:
      type: object
      description: |-
        Serializer to create a user response.
        Expects:
          - question
          - (optional) free_text_answer
          - (optional) choice_ids for the selected choice(s)
      properties:
        question:
          type: integer
        free_text_answer:
          type: string
          nullable: true
      required:
      - question
    CreateResponseRequest:
      type: object
      description: |-
        Serializer to create a user response.
        Expects:
          - question
          - (optional) free_text_answer
          - (optional) choice_ids for the selected choice(s)
      properties:
        question:
          type: integer
        free_text_answer:
          type: string
          nullable: true
        choice_ids:
          type: array
          items:
            type: integer
          writeOnly: true
      required:
      - question
    Invitation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
          format: uuid
          readOnly: true
        invite_password:
          type: string
          maxLength: 128
        invited_by:
          type: integer
          readOnly: true
          nullable: true
        invited_by_username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        invited_user:
          type: integer
          readOnly: true
          nullable: true
        invited_user_username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        expires_at:
          type: string
          format: date-time
      required:
      - code
      - created_at
      - id
      - invite_password
      - invited_by
      - invited_by_username
      - invited_user
      - invited_user_username
    InvitationRequest:
      type: object
      properties:
        invite_password:
          type: string
          minLength: 1
          maxLength: 128
        expires_at:
          type: string
          format: date-time
      required:
      - invite_password
    PaginatedCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
    PatchedPollRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        is_core_survey:
          type: boolean
    PatchedTopicRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        topic_type:
          $ref: "#/components/schemas/TopicTypeEnum"
        poll:
          type: integer
          nullable: true
    Poll:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        created_by:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        is_core_survey:
          type: boolean
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
          readOnly: true
      required:
      - created_at
      - created_by
      - id
      - questions
      - title
    PollRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        is_core_survey:
          type: boolean
      required:
      - title
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          maxLength: 500
        question_type:
          $ref: "#/components/schemas/QuestionTypeEnum"
        allow_free_form:
          type: boolean
        choices:
          type: array
          items:
            $ref: "#/components/schemas/Choice"
          readOnly: true
      required:
      - choices
      - id
      - question_type
      - text
    QuestionRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 500
        question_type:
          $ref: "#/components/schemas/QuestionTypeEnum"
        allow_free_form:
          type: boolean
      required:
      - question_type
      - text
    QuestionTypeEnum:
      enum:
      - single
      - multiple
      - text
      type: string
      description: |-
        * `single` - Single Choice
        * `multiple` - Multiple Choice
        * `text` - Text Input
    RegisterWithInvite:
      type: object
      description: |-
        Serializer to validate invite code and invite password,
        and then create a new user if valid.
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        invite_code:
          type: string
        invite_password:
          type: string
      required:
      - invite_code
      - invite_password
      - username
    RegisterWithInviteRequest:
      type: object
      description: |-
        Serializer to validate invite code and invite password,
        and then create a new user if valid.
      properties:
        username:
          type: string
          minLength: 1
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          minLength: 1
        invite_code:
          type: string
          minLength: 1
        invite_password:
          type: string
          minLength: 1
      required:
      - invite_code
      - invite_password
      - password
      - username
    Response:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        question:
          type: integer
        free_text_answer:
          type: string
          nullable: true
        selected_choices:
          type: array
          items:
            $ref: "#/components/schemas/ResponseChoice"
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - question
      - selected_choices
      - user
    ResponseChoice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        choice:
          type: integer
      required:
      - choice
      - id
    Topic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        content:
          type: string
          nullable: true
        excerpt:
          type: string
          readOnly: true
        image:
          type: string
          format: uri
          nullable: true
        topic_type:
          $ref: "#/components/schemas/TopicTypeEnum"
        poll:
          type: integer
          nullable: true
        poll_details:
          allOf:
          - $ref: "#/components/schemas/Poll"
          readOnly: true
        user:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        comment_count:
          type: string
          readOnly: true
        is_bookmarked:
          type: string
          readOnly: true
      required:
      - comment_count
      - created_at
      - excerpt
      - id
      - is_bookmarked
      - poll_details
      - title
      - user
    TopicRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        topic_type:
          $ref: "#/components/schemas/TopicTypeEnum"
        poll:
          type: integer
          nullable: true
      required:
      - title
    TopicTypeEnum:
      enum:
      - discussion
      - poll
      type: string
      description: |-
        * `discussion` - Discussion
        * `poll` - Poll
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        has_completed_core_survey:
          type: boolean
      required:
      - id
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        has_completed_core_survey:
          type: boolean
      required:
      - username
    Vote:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        topic:
          type: integer
        vote_type:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - id
      - topic
      - vote_type
    VoteRequest:
      type: object
      properties:
        topic:
          type: integer
        vote_type:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - topic
      - vote_type
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
